// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sipeed_tang_nano_9k.v
// Device     : GW1NR-LV9QN88PC6/I5
// LiteX sha1 : e6c63abe2
// Date       : 2025-05-15 01:13:16
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sipeed_tang_nano_9k (
    inout  wire   [15:0] IO_psram_dq,  /* synthesis syn_tristate = 1 */
    inout  wire    [1:0] IO_psram_rwds, /* synthesis syn_tristate = 1 */
    output reg     [1:0] O_psram_ck,
    output reg     [1:0] O_psram_ck_n,
    output reg     [1:0] O_psram_cs_n,
    output reg     [1:0] O_psram_reset_n,
    input  wire          clk27,
    inout  wire    [7:0] gpio_tristate,
    input  wire          serial_rx,
    output reg           serial_tx,
    output reg           spiflash_clk,
    output wire          spiflash_cs_n,
    input  wire          spiflash_miso,
    output reg           spiflash_mosi,
    input  wire          user_btn0,
    output wire          user_led0,
    output wire          user_led1,
    output wire          user_led2,
    output wire          user_led3,
    output wire          user_led4,
    output wire          user_led5
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GW1NPLL)
│    │    └─── [rPLL]
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── spiflash_phy (LiteSPIPHY)
│    └─── spiflash_phy (LiteSPISDRPHYCore)
│    │    └─── resyncreg_0* (ResyncReg)
│    │    └─── clkgen (LiteSPIClkGen)
│    │    └─── cs_timer (WaitTimer)
│    │    └─── fsm (FSM)
└─── spiflash_core (LiteSPI)
│    └─── crossbar (LiteSPICrossbar)
│    │    └─── rr (RoundRobin)
│    │    └─── tx_mux (Multiplexer)
│    │    └─── rx_demux (Demultiplexer)
│    └─── mmap (LiteSPIMMAP)
│    │    └─── burst_timeout (WaitTimer)
│    │    └─── fsm (FSM)
└─── hyperram (HyperRAM)
└─── gpio (GPIOTristate)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_1* (CSRStorage)
│    └─── sram_0* (SRAM)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [DFFP]
└─── [DFFP]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg    [19:0] builder_count = 20'd1000000;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire    [7:0] builder_csr_bankarray_csrbank1_in_r;
reg           builder_csr_bankarray_csrbank1_in_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank1_in_w;
reg           builder_csr_bankarray_csrbank1_in_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank1_oe0_r;
reg           builder_csr_bankarray_csrbank1_oe0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank1_oe0_w;
reg           builder_csr_bankarray_csrbank1_oe0_we = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank1_out0_r;
reg           builder_csr_bankarray_csrbank1_out0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank1_out0_w;
reg           builder_csr_bankarray_csrbank1_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire    [5:0] builder_csr_bankarray_csrbank2_out0_r;
reg           builder_csr_bankarray_csrbank2_out0_re = 1'd0;
wire    [5:0] builder_csr_bankarray_csrbank2_out0_w;
reg           builder_csr_bankarray_csrbank2_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire    [7:0] builder_csr_bankarray_csrbank3_mmap_dummy_bits0_r;
reg           builder_csr_bankarray_csrbank3_mmap_dummy_bits0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank3_mmap_dummy_bits0_w;
reg           builder_csr_bankarray_csrbank3_mmap_dummy_bits0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire    [7:0] builder_csr_bankarray_csrbank4_clk_divisor0_r;
reg           builder_csr_bankarray_csrbank4_clk_divisor0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank4_clk_divisor0_w;
reg           builder_csr_bankarray_csrbank4_clk_divisor0_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire          builder_csr_bankarray_csrbank5_en0_r;
reg           builder_csr_bankarray_csrbank5_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_en0_w;
reg           builder_csr_bankarray_csrbank5_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_enable0_r;
reg           builder_csr_bankarray_csrbank5_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_enable0_w;
reg           builder_csr_bankarray_csrbank5_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_pending_r;
reg           builder_csr_bankarray_csrbank5_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_pending_w;
reg           builder_csr_bankarray_csrbank5_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_status_r;
reg           builder_csr_bankarray_csrbank5_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_ev_status_w;
reg           builder_csr_bankarray_csrbank5_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_load0_r;
reg           builder_csr_bankarray_csrbank5_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_load0_w;
reg           builder_csr_bankarray_csrbank5_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_reload0_r;
reg           builder_csr_bankarray_csrbank5_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_reload0_w;
reg           builder_csr_bankarray_csrbank5_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank5_sel;
wire          builder_csr_bankarray_csrbank5_update_value0_r;
reg           builder_csr_bankarray_csrbank5_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank5_update_value0_w;
reg           builder_csr_bankarray_csrbank5_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_value_r;
reg           builder_csr_bankarray_csrbank5_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank5_value_w;
reg           builder_csr_bankarray_csrbank5_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_enable0_r;
reg           builder_csr_bankarray_csrbank6_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_enable0_w;
reg           builder_csr_bankarray_csrbank6_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_pending_r;
reg           builder_csr_bankarray_csrbank6_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_pending_w;
reg           builder_csr_bankarray_csrbank6_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_status_r;
reg           builder_csr_bankarray_csrbank6_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank6_ev_status_w;
reg           builder_csr_bankarray_csrbank6_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_rxempty_r;
reg           builder_csr_bankarray_csrbank6_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_rxempty_w;
reg           builder_csr_bankarray_csrbank6_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_rxfull_r;
reg           builder_csr_bankarray_csrbank6_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_rxfull_w;
reg           builder_csr_bankarray_csrbank6_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_sel;
wire          builder_csr_bankarray_csrbank6_txempty_r;
reg           builder_csr_bankarray_csrbank6_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_txempty_w;
reg           builder_csr_bankarray_csrbank6_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank6_txfull_r;
reg           builder_csr_bankarray_csrbank6_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank6_txfull_w;
reg           builder_csr_bankarray_csrbank6_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_re;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_re;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_re;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_re;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_re;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface5_bank_bus_dat_w;
wire          builder_csr_bankarray_interface5_bank_bus_re;
wire          builder_csr_bankarray_interface5_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface6_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface6_bank_bus_dat_w;
wire          builder_csr_bankarray_interface6_bank_bus_re;
wire          builder_csr_bankarray_interface6_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_re;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_re;
wire          builder_csr_interconnect_we;
wire          builder_done;
reg           builder_error = 1'd0;
reg           builder_grant = 1'd0;
wire          builder_gw1npll0;
wire          builder_gw1npll1;
wire          builder_gw1npll2;
reg           builder_interface0_ack = 1'd0;
wire   [29:0] builder_interface0_adr;
wire    [1:0] builder_interface0_bte;
wire    [2:0] builder_interface0_cti;
wire          builder_interface0_cyc;
reg    [31:0] builder_interface0_dat_r = 32'd0;
wire   [31:0] builder_interface0_dat_w;
reg           builder_interface0_err = 1'd0;
wire    [3:0] builder_interface0_sel;
wire          builder_interface0_stb;
wire          builder_interface0_we;
reg    [13:0] builder_interface1_adr = 14'd0;
wire   [31:0] builder_interface1_dat_r;
reg    [31:0] builder_interface1_dat_w = 32'd0;
reg           builder_interface1_re = 1'd0;
reg           builder_interface1_we = 1'd0;
wire          builder_litespi_grant;
reg     [3:0] builder_litespi_next_state = 4'd0;
wire          builder_litespi_request;
wire          builder_litespi_rx_demux_sel;
wire          builder_litespi_rx_demux_sink_first;
wire          builder_litespi_rx_demux_sink_last;
wire   [31:0] builder_litespi_rx_demux_sink_payload_data;
reg           builder_litespi_rx_demux_sink_ready = 1'd0;
wire          builder_litespi_rx_demux_sink_valid;
reg           builder_litespi_rx_demux_source_first = 1'd0;
reg           builder_litespi_rx_demux_source_last = 1'd0;
reg    [31:0] builder_litespi_rx_demux_source_payload_data = 32'd0;
wire          builder_litespi_rx_demux_source_ready;
reg           builder_litespi_rx_demux_source_valid = 1'd0;
reg     [3:0] builder_litespi_state = 4'd0;
wire          builder_litespi_tx_mux_sel;
wire          builder_litespi_tx_mux_sink_first;
wire          builder_litespi_tx_mux_sink_last;
wire   [31:0] builder_litespi_tx_mux_sink_payload_data;
wire    [5:0] builder_litespi_tx_mux_sink_payload_len;
wire    [7:0] builder_litespi_tx_mux_sink_payload_mask;
wire    [3:0] builder_litespi_tx_mux_sink_payload_width;
reg           builder_litespi_tx_mux_sink_ready = 1'd0;
wire          builder_litespi_tx_mux_sink_valid;
reg           builder_litespi_tx_mux_source_first = 1'd0;
reg           builder_litespi_tx_mux_source_last = 1'd0;
reg    [31:0] builder_litespi_tx_mux_source_payload_data = 32'd0;
reg     [5:0] builder_litespi_tx_mux_source_payload_len = 6'd0;
reg     [7:0] builder_litespi_tx_mux_source_payload_mask = 8'd0;
reg     [3:0] builder_litespi_tx_mux_source_payload_width = 4'd0;
wire          builder_litespi_tx_mux_source_ready;
reg           builder_litespi_tx_mux_source_valid = 1'd0;
reg     [1:0] builder_litespiphy_next_state = 2'd0;
reg     [1:0] builder_litespiphy_state = 2'd0;
reg           builder_multiregimpl00 = 1'd0;
reg           builder_multiregimpl01 = 1'd0;
reg           builder_multiregimpl10 = 1'd0;
reg           builder_multiregimpl11 = 1'd0;
reg           builder_multiregimpl20 = 1'd0;
reg           builder_multiregimpl21 = 1'd0;
reg           builder_multiregimpl30 = 1'd0;
reg           builder_multiregimpl31 = 1'd0;
reg           builder_multiregimpl40 = 1'd0;
reg           builder_multiregimpl41 = 1'd0;
reg           builder_multiregimpl50 = 1'd0;
reg           builder_multiregimpl51 = 1'd0;
reg           builder_multiregimpl60 = 1'd0;
reg           builder_multiregimpl61 = 1'd0;
reg           builder_multiregimpl70 = 1'd0;
reg           builder_multiregimpl71 = 1'd0;
reg           builder_multiregimpl80 = 1'd0;
reg           builder_multiregimpl81 = 1'd0;
wire    [1:0] builder_request;
reg           builder_rs232phyrx_next_state = 1'd0;
reg           builder_rs232phyrx_state = 1'd0;
reg           builder_rs232phytx_next_state = 1'd0;
reg           builder_rs232phytx_state = 1'd0;
wire          builder_rst1;
reg    [29:0] builder_self0 = 30'd0;
reg    [31:0] builder_self1 = 32'd0;
reg     [3:0] builder_self2 = 4'd0;
reg           builder_self3 = 1'd0;
reg           builder_self4 = 1'd0;
reg           builder_self5 = 1'd0;
reg     [2:0] builder_self6 = 3'd0;
reg     [1:0] builder_self7 = 2'd0;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [3:0] builder_slave_sel = 4'd0;
reg     [3:0] builder_slave_sel_r = 4'd0;
wire          builder_wait;
reg           builder_wishbone2csr_next_state = 1'd0;
reg           builder_wishbone2csr_state = 1'd0;
wire   [10:0] main_basesoc_adr;
reg           main_basesoc_adr_burst = 1'd0;
wire          main_basesoc_bus_error;
reg    [31:0] main_basesoc_bus_errors = 32'd0;
reg           main_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_bus_errors_status;
wire          main_basesoc_bus_errors_we;
wire          main_basesoc_cpu_rst;
reg           main_basesoc_cs = 1'd0;
wire   [31:0] main_basesoc_dat_r;
wire   [31:0] main_basesoc_dat_w;
wire          main_basesoc_dbus_ack;
wire   [29:0] main_basesoc_dbus_adr;
wire    [1:0] main_basesoc_dbus_bte;
wire    [2:0] main_basesoc_dbus_cti;
wire          main_basesoc_dbus_cyc;
wire   [31:0] main_basesoc_dbus_dat_r;
wire   [31:0] main_basesoc_dbus_dat_w;
wire          main_basesoc_dbus_err;
wire    [3:0] main_basesoc_dbus_sel;
wire          main_basesoc_dbus_stb;
wire          main_basesoc_dbus_we;
wire          main_basesoc_ibus_ack;
wire   [29:0] main_basesoc_ibus_adr;
wire    [1:0] main_basesoc_ibus_bte;
wire    [2:0] main_basesoc_ibus_cti;
wire          main_basesoc_ibus_cyc;
wire   [31:0] main_basesoc_ibus_dat_r;
wire   [31:0] main_basesoc_ibus_dat_w;
wire          main_basesoc_ibus_err;
wire    [3:0] main_basesoc_ibus_sel;
wire          main_basesoc_ibus_stb;
wire          main_basesoc_ibus_we;
wire          main_basesoc_internal_port_sink_first;
wire          main_basesoc_internal_port_sink_last;
wire   [31:0] main_basesoc_internal_port_sink_payload_data;
wire    [5:0] main_basesoc_internal_port_sink_payload_len;
wire    [7:0] main_basesoc_internal_port_sink_payload_mask;
wire    [3:0] main_basesoc_internal_port_sink_payload_width;
wire          main_basesoc_internal_port_sink_ready;
wire          main_basesoc_internal_port_sink_valid;
wire          main_basesoc_internal_port_source_first;
wire          main_basesoc_internal_port_source_last;
wire   [31:0] main_basesoc_internal_port_source_payload_data;
wire          main_basesoc_internal_port_source_ready;
wire          main_basesoc_internal_port_source_valid;
reg    [31:0] main_basesoc_interrupt = 32'd0;
reg           main_basesoc_litespimmap0 = 1'd0;
reg           main_basesoc_litespimmap1 = 1'd0;
reg    [29:0] main_basesoc_litespimmap_burst_adr = 30'd0;
reg    [29:0] main_basesoc_litespimmap_burst_adr_litespi_f_next_value = 30'd0;
reg           main_basesoc_litespimmap_burst_adr_litespi_f_next_value_ce = 1'd0;
reg           main_basesoc_litespimmap_burst_cs = 1'd0;
reg           main_basesoc_litespimmap_burst_cs_litespi_next_value = 1'd0;
reg           main_basesoc_litespimmap_burst_cs_litespi_next_value_ce = 1'd0;
reg           main_basesoc_litespimmap_bus_ack = 1'd0;
wire   [29:0] main_basesoc_litespimmap_bus_adr;
wire    [1:0] main_basesoc_litespimmap_bus_bte;
wire    [2:0] main_basesoc_litespimmap_bus_cti;
wire          main_basesoc_litespimmap_bus_cyc;
reg    [31:0] main_basesoc_litespimmap_bus_dat_r = 32'd0;
wire   [31:0] main_basesoc_litespimmap_bus_dat_w;
reg           main_basesoc_litespimmap_bus_err = 1'd0;
wire    [3:0] main_basesoc_litespimmap_bus_sel;
wire          main_basesoc_litespimmap_bus_stb;
wire          main_basesoc_litespimmap_bus_we;
reg     [1:0] main_basesoc_litespimmap_byte_count = 2'd0;
reg     [1:0] main_basesoc_litespimmap_byte_count_litespi_t_next_value = 2'd0;
reg           main_basesoc_litespimmap_byte_count_litespi_t_next_value_ce = 1'd0;
reg     [8:0] main_basesoc_litespimmap_count = 9'd256;
reg           main_basesoc_litespimmap_cs = 1'd0;
reg    [31:0] main_basesoc_litespimmap_data_write = 32'd0;
reg    [31:0] main_basesoc_litespimmap_data_write_litespi_t_f_next_value1 = 32'd0;
reg           main_basesoc_litespimmap_data_write_litespi_t_f_next_value_ce1 = 1'd0;
wire          main_basesoc_litespimmap_done;
reg    [31:0] main_basesoc_litespimmap_dummy = 32'd57005;
wire   [29:0] main_basesoc_litespimmap_offset;
reg           main_basesoc_litespimmap_re = 1'd0;
wire          main_basesoc_litespimmap_sink_first;
wire          main_basesoc_litespimmap_sink_last;
wire   [31:0] main_basesoc_litespimmap_sink_payload_data;
reg           main_basesoc_litespimmap_sink_ready = 1'd0;
wire          main_basesoc_litespimmap_sink_valid;
reg           main_basesoc_litespimmap_source_first = 1'd0;
reg           main_basesoc_litespimmap_source_last = 1'd0;
reg    [31:0] main_basesoc_litespimmap_source_payload_data = 32'd0;
reg     [5:0] main_basesoc_litespimmap_source_payload_len = 6'd0;
reg     [7:0] main_basesoc_litespimmap_source_payload_mask = 8'd0;
reg     [3:0] main_basesoc_litespimmap_source_payload_width = 4'd0;
wire          main_basesoc_litespimmap_source_ready;
reg           main_basesoc_litespimmap_source_valid = 1'd0;
wire    [7:0] main_basesoc_litespimmap_spi_dummy_bits;
reg     [7:0] main_basesoc_litespimmap_storage = 8'd0;
reg           main_basesoc_litespimmap_wait = 1'd0;
reg           main_basesoc_litespimmap_write = 1'd0;
wire          main_basesoc_litespimmap_write_enabled;
reg           main_basesoc_litespimmap_write_litespi_t_t_next_value = 1'd0;
reg           main_basesoc_litespimmap_write_litespi_t_t_next_value_ce = 1'd0;
reg     [3:0] main_basesoc_litespimmap_write_mask = 4'd0;
reg     [3:0] main_basesoc_litespimmap_write_mask_litespi_t_f_next_value0 = 4'd0;
reg           main_basesoc_litespimmap_write_mask_litespi_t_f_next_value_ce0 = 1'd0;
reg           main_basesoc_litespisdrphycore0 = 1'd0;
reg     [1:0] main_basesoc_litespisdrphycore1 = 2'd0;
reg     [3:0] main_basesoc_litespisdrphycore2 = 4'd0;
reg     [7:0] main_basesoc_litespisdrphycore3 = 8'd0;
reg           main_basesoc_litespisdrphycore_clk = 1'd0;
reg     [7:0] main_basesoc_litespisdrphycore_cnt = 8'd0;
reg     [3:0] main_basesoc_litespisdrphycore_count = 4'd11;
wire          main_basesoc_litespisdrphycore_cs;
wire          main_basesoc_litespisdrphycore_cs_enable;
wire    [7:0] main_basesoc_litespisdrphycore_div;
wire          main_basesoc_litespisdrphycore_done;
reg     [1:0] main_basesoc_litespisdrphycore_dq_i = 2'd0;
reg           main_basesoc_litespisdrphycore_dq_o = 1'd0;
wire          main_basesoc_litespisdrphycore_dq_oe;
reg           main_basesoc_litespisdrphycore_en = 1'd0;
reg           main_basesoc_litespisdrphycore_en_int = 1'd0;
wire          main_basesoc_litespisdrphycore_negedge;
wire          main_basesoc_litespisdrphycore_posedge;
reg           main_basesoc_litespisdrphycore_posedge_reg = 1'd0;
reg           main_basesoc_litespisdrphycore_posedge_reg2 = 1'd0;
reg           main_basesoc_litespisdrphycore_re = 1'd0;
wire          main_basesoc_litespisdrphycore_sink_first;
wire          main_basesoc_litespisdrphycore_sink_last;
wire   [31:0] main_basesoc_litespisdrphycore_sink_payload_data;
wire    [5:0] main_basesoc_litespisdrphycore_sink_payload_len;
wire    [7:0] main_basesoc_litespisdrphycore_sink_payload_mask;
wire    [3:0] main_basesoc_litespisdrphycore_sink_payload_width;
reg           main_basesoc_litespisdrphycore_sink_ready = 1'd0;
wire          main_basesoc_litespisdrphycore_sink_valid;
reg           main_basesoc_litespisdrphycore_source_first = 1'd0;
reg           main_basesoc_litespisdrphycore_source_last = 1'd0;
wire   [31:0] main_basesoc_litespisdrphycore_source_payload_data;
wire          main_basesoc_litespisdrphycore_source_ready;
reg           main_basesoc_litespisdrphycore_source_valid = 1'd0;
wire    [7:0] main_basesoc_litespisdrphycore_spi_clk_divisor;
reg     [7:0] main_basesoc_litespisdrphycore_sr_cnt = 8'd0;
reg     [7:0] main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value = 8'd0;
reg           main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce = 1'd0;
reg    [31:0] main_basesoc_litespisdrphycore_sr_in = 32'd0;
reg           main_basesoc_litespisdrphycore_sr_in_shift = 1'd0;
reg    [31:0] main_basesoc_litespisdrphycore_sr_out = 32'd0;
reg           main_basesoc_litespisdrphycore_sr_out_load = 1'd0;
reg           main_basesoc_litespisdrphycore_sr_out_shift = 1'd0;
reg     [7:0] main_basesoc_litespisdrphycore_storage = 8'd0;
wire          main_basesoc_litespisdrphycore_wait;
reg           main_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_ram_bus_adr;
wire    [1:0] main_basesoc_ram_bus_bte;
wire    [2:0] main_basesoc_ram_bus_cti;
wire          main_basesoc_ram_bus_cyc;
wire   [31:0] main_basesoc_ram_bus_dat_r;
wire   [31:0] main_basesoc_ram_bus_dat_w;
reg           main_basesoc_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_ram_bus_sel;
wire          main_basesoc_ram_bus_stb;
wire          main_basesoc_ram_bus_we;
wire          main_basesoc_request;
wire          main_basesoc_reset;
reg           main_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_rx_source_ready;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
wire          main_basesoc_sink_first;
wire          main_basesoc_sink_last;
wire   [31:0] main_basesoc_sink_payload_data;
wire          main_basesoc_sink_ready;
wire          main_basesoc_sink_valid;
reg           main_basesoc_soc_rst = 1'd0;
wire          main_basesoc_source_first;
wire          main_basesoc_source_last;
wire   [31:0] main_basesoc_source_payload_data;
wire    [5:0] main_basesoc_source_payload_len;
wire    [7:0] main_basesoc_source_payload_mask;
wire    [3:0] main_basesoc_source_payload_width;
wire          main_basesoc_source_ready;
wire          main_basesoc_source_valid;
reg           main_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_timer_irq;
reg           main_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_timer_pending_re = 1'd0;
wire          main_basesoc_timer_pending_status;
wire          main_basesoc_timer_pending_we;
reg           main_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_timer_status_re = 1'd0;
wire          main_basesoc_timer_status_status;
wire          main_basesoc_timer_status_we;
reg           main_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_timer_value = 32'd0;
reg           main_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_timer_value_we;
wire          main_basesoc_timer_zero0;
wire          main_basesoc_timer_zero1;
wire          main_basesoc_timer_zero2;
reg           main_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_timer_zero_status;
wire          main_basesoc_timer_zero_trigger;
reg           main_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_first;
wire          main_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_tx_sink_payload_data;
reg           main_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_tx_sink_valid;
reg           main_basesoc_tx_tick = 1'd0;
reg           main_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_uart_irq;
reg     [1:0] main_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_uart_pending_we;
wire          main_basesoc_uart_rx0;
wire          main_basesoc_uart_rx1;
wire          main_basesoc_uart_rx2;
reg           main_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_uart_rx_fifo_re;
reg           main_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_uart_rx_status;
wire          main_basesoc_uart_rx_trigger;
reg           main_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_uart_rxempty_status;
wire          main_basesoc_uart_rxempty_we;
reg           main_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_uart_rxfull_status;
wire          main_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_uart_rxtx_r;
reg           main_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_uart_rxtx_w;
reg           main_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_uart_status_we;
wire          main_basesoc_uart_tx0;
wire          main_basesoc_uart_tx1;
wire          main_basesoc_uart_tx2;
reg           main_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_uart_tx_fifo_re;
reg           main_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_uart_tx_status;
wire          main_basesoc_uart_tx_trigger;
reg           main_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_uart_txempty_status;
wire          main_basesoc_uart_txempty_we;
reg           main_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_uart_txfull_status;
wire          main_basesoc_uart_txfull_we;
wire          main_basesoc_uart_uart_sink_first;
wire          main_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_uart_uart_sink_ready;
wire          main_basesoc_uart_uart_sink_valid;
wire          main_basesoc_uart_uart_source_first;
wire          main_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_uart_uart_source_ready;
wire          main_basesoc_uart_uart_source_valid;
wire          main_basesoc_user_port_sink_first;
wire          main_basesoc_user_port_sink_last;
wire   [31:0] main_basesoc_user_port_sink_payload_data;
wire    [5:0] main_basesoc_user_port_sink_payload_len;
wire    [7:0] main_basesoc_user_port_sink_payload_mask;
wire    [3:0] main_basesoc_user_port_sink_payload_width;
wire          main_basesoc_user_port_sink_ready;
wire          main_basesoc_user_port_sink_valid;
wire          main_basesoc_user_port_source_first;
wire          main_basesoc_user_port_source_last;
wire   [31:0] main_basesoc_user_port_source_payload_data;
wire          main_basesoc_user_port_source_ready;
wire          main_basesoc_user_port_source_valid;
reg     [3:0] main_basesoc_we = 4'd0;
reg     [5:0] main_chaser = 6'd0;
reg    [21:0] main_count = 22'd2250000;
wire          main_crg_clkin;
wire          main_crg_clkout;
wire          main_crg_locked;
wire          main_crg_reset;
reg           main_crg_rst0 = 1'd0;
wire          main_done;
reg           main_hyperram_bus_ack = 1'd0;
wire   [29:0] main_hyperram_bus_adr;
wire    [1:0] main_hyperram_bus_bte;
wire    [2:0] main_hyperram_bus_cti;
wire          main_hyperram_bus_cyc;
wire   [31:0] main_hyperram_bus_dat_r;
wire   [31:0] main_hyperram_bus_dat_w;
reg           main_hyperram_bus_err = 1'd0;
wire    [3:0] main_hyperram_bus_sel;
wire          main_hyperram_bus_stb;
wire          main_hyperram_bus_we;
reg    [47:0] main_hyperram_ca = 48'd0;
reg           main_hyperram_ca_active = 1'd0;
reg           main_hyperram_clk = 1'd0;
reg     [1:0] main_hyperram_clk_phase = 2'd0;
reg           main_hyperram_cs = 1'd0;
reg     [7:0] main_hyperram_dqi = 8'd0;
wire          main_hyperram_pads_clk;
reg     [1:0] main_hyperram_rwdso = 2'd0;
reg    [47:0] main_hyperram_sr = 48'd0;
reg     [6:0] main_hyperram_trigger = 7'd0;
wire    [7:0] main_hyperram_tstriple0_i;
reg     [7:0] main_hyperram_tstriple0_o = 8'd0;
reg           main_hyperram_tstriple0_oe = 1'd0;
wire          main_hyperram_tstriple1_i;
wire          main_hyperram_tstriple1_o;
reg           main_hyperram_tstriple1_oe = 1'd0;
reg           main_in_re = 1'd0;
reg     [7:0] main_in_status = 8'd0;
wire          main_in_we;
reg     [5:0] main_leds = 6'd0;
reg           main_mode = 1'd0;
reg           main_oe_re = 1'd0;
reg     [7:0] main_oe_storage = 1'd0;
reg           main_out_re = 1'd0;
reg     [7:0] main_out_storage = 1'd0;
reg           main_re = 1'd0;
reg     [5:0] main_storage = 6'd0;
wire          main_tstriple0_i;
wire          main_tstriple0_o;
wire          main_tstriple0_oe;
wire          main_tstriple1_i;
wire          main_tstriple1_o;
wire          main_tstriple1_oe;
wire          main_tstriple2_i;
wire          main_tstriple2_o;
wire          main_tstriple2_oe;
wire          main_tstriple3_i;
wire          main_tstriple3_o;
wire          main_tstriple3_oe;
wire          main_tstriple4_i;
wire          main_tstriple4_o;
wire          main_tstriple4_oe;
wire          main_tstriple5_i;
wire          main_tstriple5_o;
wire          main_tstriple5_oe;
wire          main_tstriple6_i;
wire          main_tstriple6_o;
wire          main_tstriple6_oe;
wire          main_tstriple7_i;
wire          main_tstriple7_o;
wire          main_tstriple7_oe;
reg    [31:0] main_vexriscv = 32'd0;
wire          main_wait;
wire          sdrio_clk;
wire          sdrio_clk_1;
wire          sdrio_clk_2;
wire          sys_clk;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
assign main_basesoc_litespimmap_offset = 1'd0;
always @(*) begin
    O_psram_ck <= 2'd0;
    O_psram_ck[0] <= main_hyperram_pads_clk;
end
always @(*) begin
    O_psram_ck_n <= 2'd0;
    O_psram_ck_n[0] <= (~main_hyperram_pads_clk);
end
always @(*) begin
    main_crg_rst0 <= 1'd0;
    if (main_basesoc_soc_rst) begin
        main_crg_rst0 <= 1'd1;
    end
end
assign main_basesoc_bus_error = builder_error;
always @(*) begin
    main_basesoc_interrupt <= 32'd0;
    main_basesoc_interrupt[1] <= main_basesoc_timer_irq;
    main_basesoc_interrupt[0] <= main_basesoc_uart_irq;
end
assign main_crg_reset = (~user_btn0);
assign main_crg_clkin = clk27;
assign sys_clk = main_crg_clkout;
assign builder_shared_adr = builder_self0;
assign builder_shared_dat_w = builder_self1;
assign builder_shared_sel = builder_self2;
assign builder_shared_cyc = builder_self3;
assign builder_shared_stb = builder_self4;
assign builder_shared_we = builder_self5;
assign builder_shared_cti = builder_self6;
assign builder_shared_bte = builder_self7;
assign main_basesoc_ibus_dat_r = builder_shared_dat_r;
assign main_basesoc_dbus_dat_r = builder_shared_dat_r;
assign main_basesoc_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_basesoc_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_basesoc_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_basesoc_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_basesoc_dbus_cyc, main_basesoc_ibus_cyc};
always @(*) begin
    builder_slave_sel <= 4'd0;
    builder_slave_sel[0] <= (builder_shared_adr[29:11] == 16'd32768);
    builder_slave_sel[1] <= (builder_shared_adr[29:20] == 1'd0);
    builder_slave_sel[2] <= (builder_shared_adr[29:20] == 9'd256);
    builder_slave_sel[3] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_ram_bus_bte = builder_shared_bte;
assign main_basesoc_litespimmap_bus_adr = builder_shared_adr;
assign main_basesoc_litespimmap_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_litespimmap_bus_sel = builder_shared_sel;
assign main_basesoc_litespimmap_bus_stb = builder_shared_stb;
assign main_basesoc_litespimmap_bus_we = builder_shared_we;
assign main_basesoc_litespimmap_bus_cti = builder_shared_cti;
assign main_basesoc_litespimmap_bus_bte = builder_shared_bte;
assign main_hyperram_bus_adr = builder_shared_adr;
assign main_hyperram_bus_dat_w = builder_shared_dat_w;
assign main_hyperram_bus_sel = builder_shared_sel;
assign main_hyperram_bus_stb = builder_shared_stb;
assign main_hyperram_bus_we = builder_shared_we;
assign main_hyperram_bus_cti = builder_shared_cti;
assign main_hyperram_bus_bte = builder_shared_bte;
assign builder_interface0_adr = builder_shared_adr;
assign builder_interface0_dat_w = builder_shared_dat_w;
assign builder_interface0_sel = builder_shared_sel;
assign builder_interface0_stb = builder_shared_stb;
assign builder_interface0_we = builder_shared_we;
assign builder_interface0_cti = builder_shared_cti;
assign builder_interface0_bte = builder_shared_bte;
assign main_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_basesoc_litespimmap_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign main_hyperram_bus_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_interface0_cyc = (builder_shared_cyc & builder_slave_sel[3]);
assign builder_shared_err = (((main_basesoc_ram_bus_err | main_basesoc_litespimmap_bus_err) | main_hyperram_bus_err) | builder_interface0_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= (((main_basesoc_ram_bus_ack | main_basesoc_litespimmap_bus_ack) | main_hyperram_bus_ack) | builder_interface0_ack);
    builder_shared_dat_r <= (((({32{builder_slave_sel_r[0]}} & main_basesoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_basesoc_litespimmap_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & main_hyperram_bus_dat_r)) | ({32{builder_slave_sel_r[3]}} & builder_interface0_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
always @(*) begin
    main_basesoc_we <= 4'd0;
    main_basesoc_we[0] <= (((main_basesoc_ram_bus_cyc & main_basesoc_ram_bus_stb) & main_basesoc_ram_bus_we) & main_basesoc_ram_bus_sel[0]);
    main_basesoc_we[1] <= (((main_basesoc_ram_bus_cyc & main_basesoc_ram_bus_stb) & main_basesoc_ram_bus_we) & main_basesoc_ram_bus_sel[1]);
    main_basesoc_we[2] <= (((main_basesoc_ram_bus_cyc & main_basesoc_ram_bus_stb) & main_basesoc_ram_bus_we) & main_basesoc_ram_bus_sel[2]);
    main_basesoc_we[3] <= (((main_basesoc_ram_bus_cyc & main_basesoc_ram_bus_stb) & main_basesoc_ram_bus_we) & main_basesoc_ram_bus_sel[3]);
end
assign main_basesoc_adr = main_basesoc_ram_bus_adr[10:0];
assign main_basesoc_ram_bus_dat_r = main_basesoc_dat_r;
assign main_basesoc_dat_w = main_basesoc_ram_bus_dat_w;
always @(*) begin
    builder_rs232phytx_next_state <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    builder_rs232phytx_next_state <= builder_rs232phytx_state;
    case (builder_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= main_basesoc_tx_data[0];
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
    case (builder_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
        main_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
        main_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
        main_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign main_basesoc_litespisdrphycore_div = main_basesoc_litespisdrphycore_spi_clk_divisor;
assign main_basesoc_litespisdrphycore_wait = main_basesoc_litespisdrphycore_cs;
assign main_basesoc_litespisdrphycore_cs_enable = main_basesoc_litespisdrphycore_done;
assign spiflash_cs_n = (~main_basesoc_litespisdrphycore_cs_enable);
assign main_basesoc_litespisdrphycore_dq_oe = main_basesoc_litespisdrphycore_sink_payload_mask;
always @(*) begin
    main_basesoc_litespisdrphycore_dq_o <= 1'd0;
    case (main_basesoc_litespisdrphycore_sink_payload_width)
        1'd1: begin
            main_basesoc_litespisdrphycore_dq_o <= main_basesoc_litespisdrphycore_sr_out[31];
        end
        2'd2: begin
            main_basesoc_litespisdrphycore_dq_o <= main_basesoc_litespisdrphycore_sr_out[31:30];
        end
        3'd4: begin
            main_basesoc_litespisdrphycore_dq_o <= main_basesoc_litespisdrphycore_sr_out[31:28];
        end
        4'd8: begin
            main_basesoc_litespisdrphycore_dq_o <= main_basesoc_litespisdrphycore_sr_out[31:24];
        end
    endcase
end
assign main_basesoc_litespisdrphycore_source_payload_data = main_basesoc_litespisdrphycore_sr_in;
assign main_basesoc_litespisdrphycore_spi_clk_divisor = main_basesoc_litespisdrphycore_storage;
assign main_basesoc_litespisdrphycore_posedge = ((main_basesoc_litespisdrphycore_en & (~main_basesoc_litespisdrphycore_clk)) & (main_basesoc_litespisdrphycore_cnt == main_basesoc_litespisdrphycore_div));
assign main_basesoc_litespisdrphycore_negedge = ((main_basesoc_litespisdrphycore_en & main_basesoc_litespisdrphycore_clk) & (main_basesoc_litespisdrphycore_cnt == main_basesoc_litespisdrphycore_div));
assign main_basesoc_litespisdrphycore_done = (main_basesoc_litespisdrphycore_count == 1'd0);
always @(*) begin
    builder_litespiphy_next_state <= 2'd0;
    main_basesoc_litespisdrphycore_en <= 1'd0;
    main_basesoc_litespisdrphycore_sink_ready <= 1'd0;
    main_basesoc_litespisdrphycore_source_last <= 1'd0;
    main_basesoc_litespisdrphycore_source_valid <= 1'd0;
    main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value <= 8'd0;
    main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd0;
    main_basesoc_litespisdrphycore_sr_in_shift <= 1'd0;
    main_basesoc_litespisdrphycore_sr_out_load <= 1'd0;
    main_basesoc_litespisdrphycore_sr_out_shift <= 1'd0;
    builder_litespiphy_next_state <= builder_litespiphy_state;
    case (builder_litespiphy_state)
        1'd1: begin
            main_basesoc_litespisdrphycore_en <= 1'd1;
            if (main_basesoc_litespisdrphycore_posedge_reg2) begin
                main_basesoc_litespisdrphycore_sr_in_shift <= 1'd1;
            end
            if (main_basesoc_litespisdrphycore_negedge) begin
                main_basesoc_litespisdrphycore_sr_out_shift <= 1'd1;
            end
            if (main_basesoc_litespisdrphycore_negedge) begin
                main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value <= (main_basesoc_litespisdrphycore_sr_cnt - main_basesoc_litespisdrphycore_sink_payload_width);
                main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
                if ((main_basesoc_litespisdrphycore_sr_cnt == 1'd0)) begin
                    builder_litespiphy_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (((main_basesoc_litespisdrphycore_spi_clk_divisor > 1'd0) | main_basesoc_litespisdrphycore_posedge_reg2)) begin
                main_basesoc_litespisdrphycore_sink_ready <= 1'd1;
                main_basesoc_litespisdrphycore_sr_in_shift <= (main_basesoc_litespisdrphycore_spi_clk_divisor == 1'd0);
                builder_litespiphy_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_basesoc_litespisdrphycore_source_valid <= 1'd1;
            main_basesoc_litespisdrphycore_source_last <= 1'd1;
            if (main_basesoc_litespisdrphycore_source_ready) begin
                builder_litespiphy_next_state <= 1'd0;
            end
        end
        default: begin
            if ((main_basesoc_litespisdrphycore_cs_enable & main_basesoc_litespisdrphycore_sink_valid)) begin
                main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value <= (main_basesoc_litespisdrphycore_sink_payload_len - main_basesoc_litespisdrphycore_sink_payload_width);
                main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce <= 1'd1;
                main_basesoc_litespisdrphycore_sr_out_load <= 1'd1;
                builder_litespiphy_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_litespisdrphycore_cs = main_basesoc_cs;
assign main_basesoc_litespimmap_sink_valid = main_basesoc_user_port_source_valid;
assign main_basesoc_user_port_source_ready = main_basesoc_litespimmap_sink_ready;
assign main_basesoc_litespimmap_sink_first = main_basesoc_user_port_source_first;
assign main_basesoc_litespimmap_sink_last = main_basesoc_user_port_source_last;
assign main_basesoc_litespimmap_sink_payload_data = main_basesoc_user_port_source_payload_data;
assign main_basesoc_user_port_sink_valid = main_basesoc_litespimmap_source_valid;
assign main_basesoc_litespimmap_source_ready = main_basesoc_user_port_sink_ready;
assign main_basesoc_user_port_sink_first = main_basesoc_litespimmap_source_first;
assign main_basesoc_user_port_sink_last = main_basesoc_litespimmap_source_last;
assign main_basesoc_user_port_sink_payload_data = main_basesoc_litespimmap_source_payload_data;
assign main_basesoc_user_port_sink_payload_len = main_basesoc_litespimmap_source_payload_len;
assign main_basesoc_user_port_sink_payload_width = main_basesoc_litespimmap_source_payload_width;
assign main_basesoc_user_port_sink_payload_mask = main_basesoc_litespimmap_source_payload_mask;
assign main_basesoc_litespisdrphycore_sink_valid = main_basesoc_source_valid;
assign main_basesoc_source_ready = main_basesoc_litespisdrphycore_sink_ready;
assign main_basesoc_litespisdrphycore_sink_first = main_basesoc_source_first;
assign main_basesoc_litespisdrphycore_sink_last = main_basesoc_source_last;
assign main_basesoc_litespisdrphycore_sink_payload_data = main_basesoc_source_payload_data;
assign main_basesoc_litespisdrphycore_sink_payload_len = main_basesoc_source_payload_len;
assign main_basesoc_litespisdrphycore_sink_payload_width = main_basesoc_source_payload_width;
assign main_basesoc_litespisdrphycore_sink_payload_mask = main_basesoc_source_payload_mask;
assign main_basesoc_sink_valid = main_basesoc_litespisdrphycore_source_valid;
assign main_basesoc_litespisdrphycore_source_ready = main_basesoc_sink_ready;
assign main_basesoc_sink_first = main_basesoc_litespisdrphycore_source_first;
assign main_basesoc_sink_last = main_basesoc_litespisdrphycore_source_last;
assign main_basesoc_sink_payload_data = main_basesoc_litespisdrphycore_source_payload_data;
assign main_basesoc_internal_port_sink_valid = main_basesoc_user_port_sink_valid;
assign main_basesoc_user_port_sink_ready = main_basesoc_internal_port_sink_ready;
assign main_basesoc_internal_port_sink_first = main_basesoc_user_port_sink_first;
assign main_basesoc_internal_port_sink_last = main_basesoc_user_port_sink_last;
assign main_basesoc_internal_port_sink_payload_data = main_basesoc_user_port_sink_payload_data;
assign main_basesoc_internal_port_sink_payload_len = main_basesoc_user_port_sink_payload_len;
assign main_basesoc_internal_port_sink_payload_width = main_basesoc_user_port_sink_payload_width;
assign main_basesoc_internal_port_sink_payload_mask = main_basesoc_user_port_sink_payload_mask;
assign main_basesoc_user_port_source_valid = main_basesoc_internal_port_source_valid;
assign main_basesoc_internal_port_source_ready = main_basesoc_user_port_source_ready;
assign main_basesoc_user_port_source_first = main_basesoc_internal_port_source_first;
assign main_basesoc_user_port_source_last = main_basesoc_internal_port_source_last;
assign main_basesoc_user_port_source_payload_data = main_basesoc_internal_port_source_payload_data;
assign main_basesoc_request = main_basesoc_litespimmap_cs;
assign builder_litespi_tx_mux_sink_valid = main_basesoc_internal_port_sink_valid;
assign main_basesoc_internal_port_sink_ready = builder_litespi_tx_mux_sink_ready;
assign builder_litespi_tx_mux_sink_first = main_basesoc_internal_port_sink_first;
assign builder_litespi_tx_mux_sink_last = main_basesoc_internal_port_sink_last;
assign builder_litespi_tx_mux_sink_payload_data = main_basesoc_internal_port_sink_payload_data;
assign builder_litespi_tx_mux_sink_payload_len = main_basesoc_internal_port_sink_payload_len;
assign builder_litespi_tx_mux_sink_payload_width = main_basesoc_internal_port_sink_payload_width;
assign builder_litespi_tx_mux_sink_payload_mask = main_basesoc_internal_port_sink_payload_mask;
assign main_basesoc_internal_port_source_valid = builder_litespi_rx_demux_source_valid;
assign builder_litespi_rx_demux_source_ready = main_basesoc_internal_port_source_ready;
assign main_basesoc_internal_port_source_first = builder_litespi_rx_demux_source_first;
assign main_basesoc_internal_port_source_last = builder_litespi_rx_demux_source_last;
assign main_basesoc_internal_port_source_payload_data = builder_litespi_rx_demux_source_payload_data;
assign builder_litespi_request = {main_basesoc_request};
assign main_basesoc_source_valid = builder_litespi_tx_mux_source_valid;
assign builder_litespi_tx_mux_source_ready = main_basesoc_source_ready;
assign main_basesoc_source_first = builder_litespi_tx_mux_source_first;
assign main_basesoc_source_last = builder_litespi_tx_mux_source_last;
assign main_basesoc_source_payload_data = builder_litespi_tx_mux_source_payload_data;
assign main_basesoc_source_payload_len = builder_litespi_tx_mux_source_payload_len;
assign main_basesoc_source_payload_width = builder_litespi_tx_mux_source_payload_width;
assign main_basesoc_source_payload_mask = builder_litespi_tx_mux_source_payload_mask;
assign builder_litespi_tx_mux_sel = builder_litespi_grant;
assign builder_litespi_rx_demux_sink_valid = main_basesoc_sink_valid;
assign main_basesoc_sink_ready = builder_litespi_rx_demux_sink_ready;
assign builder_litespi_rx_demux_sink_first = main_basesoc_sink_first;
assign builder_litespi_rx_demux_sink_last = main_basesoc_sink_last;
assign builder_litespi_rx_demux_sink_payload_data = main_basesoc_sink_payload_data;
assign builder_litespi_rx_demux_sel = builder_litespi_grant;
always @(*) begin
    main_basesoc_cs <= 1'd0;
    case (builder_litespi_grant)
        1'd0: begin
            main_basesoc_cs <= main_basesoc_litespimmap_cs;
        end
    endcase
end
assign builder_litespi_grant = 1'd0;
always @(*) begin
    builder_litespi_tx_mux_sink_ready <= 1'd0;
    builder_litespi_tx_mux_source_first <= 1'd0;
    builder_litespi_tx_mux_source_last <= 1'd0;
    builder_litespi_tx_mux_source_payload_data <= 32'd0;
    builder_litespi_tx_mux_source_payload_len <= 6'd0;
    builder_litespi_tx_mux_source_payload_mask <= 8'd0;
    builder_litespi_tx_mux_source_payload_width <= 4'd0;
    builder_litespi_tx_mux_source_valid <= 1'd0;
    case (builder_litespi_tx_mux_sel)
        1'd0: begin
            builder_litespi_tx_mux_source_valid <= builder_litespi_tx_mux_sink_valid;
            builder_litespi_tx_mux_sink_ready <= builder_litespi_tx_mux_source_ready;
            builder_litespi_tx_mux_source_first <= builder_litespi_tx_mux_sink_first;
            builder_litespi_tx_mux_source_last <= builder_litespi_tx_mux_sink_last;
            builder_litespi_tx_mux_source_payload_data <= builder_litespi_tx_mux_sink_payload_data;
            builder_litespi_tx_mux_source_payload_len <= builder_litespi_tx_mux_sink_payload_len;
            builder_litespi_tx_mux_source_payload_width <= builder_litespi_tx_mux_sink_payload_width;
            builder_litespi_tx_mux_source_payload_mask <= builder_litespi_tx_mux_sink_payload_mask;
        end
    endcase
end
always @(*) begin
    builder_litespi_rx_demux_sink_ready <= 1'd0;
    builder_litespi_rx_demux_source_first <= 1'd0;
    builder_litespi_rx_demux_source_last <= 1'd0;
    builder_litespi_rx_demux_source_payload_data <= 32'd0;
    builder_litespi_rx_demux_source_valid <= 1'd0;
    case (builder_litespi_rx_demux_sel)
        1'd0: begin
            builder_litespi_rx_demux_source_valid <= builder_litespi_rx_demux_sink_valid;
            builder_litespi_rx_demux_sink_ready <= builder_litespi_rx_demux_source_ready;
            builder_litespi_rx_demux_source_first <= builder_litespi_rx_demux_sink_first;
            builder_litespi_rx_demux_source_last <= builder_litespi_rx_demux_sink_last;
            builder_litespi_rx_demux_source_payload_data <= builder_litespi_rx_demux_sink_payload_data;
        end
    endcase
end
assign main_basesoc_litespimmap_spi_dummy_bits = main_basesoc_litespimmap_storage;
assign main_basesoc_litespimmap_write_enabled = 1'd0;
assign main_basesoc_litespimmap_done = (main_basesoc_litespimmap_count == 1'd0);
always @(*) begin
    builder_litespi_next_state <= 4'd0;
    main_basesoc_litespimmap_burst_adr_litespi_f_next_value <= 30'd0;
    main_basesoc_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd0;
    main_basesoc_litespimmap_burst_cs_litespi_next_value <= 1'd0;
    main_basesoc_litespimmap_burst_cs_litespi_next_value_ce <= 1'd0;
    main_basesoc_litespimmap_bus_ack <= 1'd0;
    main_basesoc_litespimmap_bus_dat_r <= 32'd0;
    main_basesoc_litespimmap_byte_count_litespi_t_next_value <= 2'd0;
    main_basesoc_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd0;
    main_basesoc_litespimmap_cs <= 1'd0;
    main_basesoc_litespimmap_data_write_litespi_t_f_next_value1 <= 32'd0;
    main_basesoc_litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd0;
    main_basesoc_litespimmap_sink_ready <= 1'd0;
    main_basesoc_litespimmap_source_last <= 1'd0;
    main_basesoc_litespimmap_source_payload_data <= 32'd0;
    main_basesoc_litespimmap_source_payload_len <= 6'd0;
    main_basesoc_litespimmap_source_payload_mask <= 8'd0;
    main_basesoc_litespimmap_source_payload_width <= 4'd0;
    main_basesoc_litespimmap_source_valid <= 1'd0;
    main_basesoc_litespimmap_wait <= 1'd0;
    main_basesoc_litespimmap_write_litespi_t_t_next_value <= 1'd0;
    main_basesoc_litespimmap_write_litespi_t_t_next_value_ce <= 1'd0;
    main_basesoc_litespimmap_write_mask_litespi_t_f_next_value0 <= 4'd0;
    main_basesoc_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd0;
    builder_litespi_next_state <= builder_litespi_state;
    case (builder_litespi_state)
        1'd1: begin
            main_basesoc_litespimmap_cs <= 1'd0;
            if (main_basesoc_litespimmap_write_mask[0]) begin
                builder_litespi_next_state <= 2'd2;
                main_basesoc_litespimmap_write_litespi_t_t_next_value <= 1'd1;
                main_basesoc_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
            end else begin
                if ((main_basesoc_litespimmap_byte_count == 2'd3)) begin
                    main_basesoc_litespimmap_bus_ack <= 1'd1;
                    main_basesoc_litespimmap_burst_adr_litespi_f_next_value <= (main_basesoc_litespimmap_burst_adr + 1'd1);
                    main_basesoc_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                    builder_litespi_next_state <= 1'd0;
                    main_basesoc_litespimmap_write_litespi_t_t_next_value <= 1'd0;
                    main_basesoc_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                end else begin
                    main_basesoc_litespimmap_byte_count_litespi_t_next_value <= (main_basesoc_litespimmap_byte_count + 1'd1);
                    main_basesoc_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                    main_basesoc_litespimmap_write_mask_litespi_t_f_next_value0 <= {main_basesoc_litespimmap0, main_basesoc_litespimmap_write_mask[3:1]};
                    main_basesoc_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                end
            end
        end
        2'd2: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_source_valid <= 1'd1;
            if ((main_basesoc_litespimmap_write_enabled & main_basesoc_litespimmap_write)) begin
                main_basesoc_litespimmap_source_payload_data <= 2'd2;
            end else begin
                main_basesoc_litespimmap_source_payload_data <= 2'd3;
            end
            main_basesoc_litespimmap_source_payload_len <= 4'd8;
            main_basesoc_litespimmap_source_payload_width <= 1'd1;
            main_basesoc_litespimmap_source_payload_mask <= 1'd1;
            main_basesoc_litespimmap_burst_adr_litespi_f_next_value <= main_basesoc_litespimmap_bus_adr;
            main_basesoc_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
            if (main_basesoc_litespimmap_source_ready) begin
                builder_litespi_next_state <= 2'd3;
            end
        end
        2'd3: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_sink_ready <= 1'd1;
            if (main_basesoc_litespimmap_sink_valid) begin
                builder_litespi_next_state <= 3'd4;
            end
        end
        3'd4: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_source_valid <= 1'd1;
            main_basesoc_litespimmap_source_payload_width <= 1'd1;
            main_basesoc_litespimmap_source_payload_mask <= 1'd1;
            main_basesoc_litespimmap_source_payload_data <= {(main_basesoc_litespimmap_bus_adr - main_basesoc_litespimmap_offset), main_basesoc_litespimmap_byte_count};
            main_basesoc_litespimmap_source_payload_len <= 5'd24;
            main_basesoc_litespimmap_burst_cs_litespi_next_value <= 1'd1;
            main_basesoc_litespimmap_burst_cs_litespi_next_value_ce <= 1'd1;
            main_basesoc_litespimmap_burst_adr_litespi_f_next_value <= main_basesoc_litespimmap_bus_adr;
            main_basesoc_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
            if (main_basesoc_litespimmap_source_ready) begin
                builder_litespi_next_state <= 3'd5;
            end
        end
        3'd5: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_sink_ready <= 1'd1;
            if (main_basesoc_litespimmap_sink_valid) begin
                if ((main_basesoc_litespimmap_write_enabled & main_basesoc_litespimmap_write)) begin
                    builder_litespi_next_state <= 4'd10;
                end else begin
                    if ((main_basesoc_litespimmap_spi_dummy_bits == 1'd0)) begin
                        builder_litespi_next_state <= 4'd8;
                    end else begin
                        builder_litespi_next_state <= 3'd6;
                    end
                end
            end
        end
        3'd6: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_source_valid <= 1'd1;
            main_basesoc_litespimmap_source_payload_width <= 1'd1;
            main_basesoc_litespimmap_source_payload_mask <= 1'd0;
            main_basesoc_litespimmap_source_payload_data <= main_basesoc_litespimmap_dummy;
            main_basesoc_litespimmap_source_payload_len <= main_basesoc_litespimmap_spi_dummy_bits;
            if (main_basesoc_litespimmap_source_ready) begin
                builder_litespi_next_state <= 3'd7;
            end
        end
        3'd7: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_sink_ready <= 1'd1;
            if (main_basesoc_litespimmap_sink_valid) begin
                builder_litespi_next_state <= 4'd8;
            end
        end
        4'd8: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_source_valid <= 1'd1;
            main_basesoc_litespimmap_source_last <= 1'd1;
            main_basesoc_litespimmap_source_payload_width <= 1'd1;
            main_basesoc_litespimmap_source_payload_len <= 6'd32;
            main_basesoc_litespimmap_source_payload_mask <= 1'd0;
            if (main_basesoc_litespimmap_source_ready) begin
                builder_litespi_next_state <= 4'd9;
            end
        end
        4'd9: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_sink_ready <= 1'd1;
            main_basesoc_litespimmap_bus_dat_r <= {main_basesoc_litespimmap_sink_payload_data[7:0], main_basesoc_litespimmap_sink_payload_data[15:8], main_basesoc_litespimmap_sink_payload_data[23:16], main_basesoc_litespimmap_sink_payload_data[31:24]};
            if (main_basesoc_litespimmap_sink_valid) begin
                main_basesoc_litespimmap_bus_ack <= 1'd1;
                main_basesoc_litespimmap_burst_adr_litespi_f_next_value <= (main_basesoc_litespimmap_burst_adr + 1'd1);
                main_basesoc_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                builder_litespi_next_state <= 1'd0;
            end
        end
        4'd10: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_source_valid <= 1'd1;
            main_basesoc_litespimmap_source_payload_width <= 1'd1;
            main_basesoc_litespimmap_source_payload_mask <= 1'd1;
            main_basesoc_litespimmap_source_payload_data <= main_basesoc_litespimmap_data_write;
            main_basesoc_litespimmap_source_payload_len <= 4'd8;
            if (main_basesoc_litespimmap_source_ready) begin
                builder_litespi_next_state <= 4'd11;
            end
        end
        4'd11: begin
            main_basesoc_litespimmap_cs <= 1'd1;
            main_basesoc_litespimmap_sink_ready <= 1'd1;
            if (main_basesoc_litespimmap_sink_valid) begin
                if ((main_basesoc_litespimmap_byte_count != 2'd3)) begin
                    main_basesoc_litespimmap_write_mask_litespi_t_f_next_value0 <= {main_basesoc_litespimmap1, main_basesoc_litespimmap_write_mask[3:1]};
                    main_basesoc_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                    main_basesoc_litespimmap_byte_count_litespi_t_next_value <= (main_basesoc_litespimmap_byte_count + 1'd1);
                    main_basesoc_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                    main_basesoc_litespimmap_data_write_litespi_t_f_next_value1 <= (main_basesoc_litespimmap_data_write >>> 4'd8);
                    main_basesoc_litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd1;
                    if (main_basesoc_litespimmap_write_mask[1]) begin
                        builder_litespi_next_state <= 4'd10;
                    end else begin
                        main_basesoc_litespimmap_cs <= 1'd0;
                        main_basesoc_litespimmap_write_litespi_t_t_next_value <= 1'd0;
                        main_basesoc_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                        builder_litespi_next_state <= 1'd1;
                    end
                end else begin
                    main_basesoc_litespimmap_bus_ack <= 1'd1;
                    main_basesoc_litespimmap_burst_adr_litespi_f_next_value <= (main_basesoc_litespimmap_burst_adr + 1'd1);
                    main_basesoc_litespimmap_burst_adr_litespi_f_next_value_ce <= 1'd1;
                    builder_litespi_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_litespimmap_wait <= 1'd1;
            main_basesoc_litespimmap_burst_cs_litespi_next_value <= (main_basesoc_litespimmap_burst_cs & (~main_basesoc_litespimmap_done));
            main_basesoc_litespimmap_burst_cs_litespi_next_value_ce <= 1'd1;
            main_basesoc_litespimmap_cs <= main_basesoc_litespimmap_burst_cs;
            if ((main_basesoc_litespimmap_bus_cyc & main_basesoc_litespimmap_bus_stb)) begin
                main_basesoc_litespimmap_byte_count_litespi_t_next_value <= 1'd0;
                main_basesoc_litespimmap_byte_count_litespi_t_next_value_ce <= 1'd1;
                if ((~main_basesoc_litespimmap_bus_we)) begin
                    if (((main_basesoc_litespimmap_burst_cs & (main_basesoc_litespimmap_bus_adr == main_basesoc_litespimmap_burst_adr)) & ((~main_basesoc_litespimmap_write_enabled) | (~main_basesoc_litespimmap_write)))) begin
                        builder_litespi_next_state <= 4'd8;
                    end else begin
                        main_basesoc_litespimmap_cs <= 1'd0;
                        builder_litespi_next_state <= 2'd2;
                    end
                    main_basesoc_litespimmap_write_litespi_t_t_next_value <= 1'd0;
                    main_basesoc_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                end else begin
                    if (main_basesoc_litespimmap_write_enabled) begin
                        main_basesoc_litespimmap_write_mask_litespi_t_f_next_value0 <= main_basesoc_litespimmap_bus_sel;
                        main_basesoc_litespimmap_write_mask_litespi_t_f_next_value_ce0 <= 1'd1;
                        main_basesoc_litespimmap_data_write_litespi_t_f_next_value1 <= main_basesoc_litespimmap_bus_dat_w;
                        main_basesoc_litespimmap_data_write_litespi_t_f_next_value_ce1 <= 1'd1;
                        if ((((main_basesoc_litespimmap_burst_cs & (main_basesoc_litespimmap_bus_adr == main_basesoc_litespimmap_burst_adr)) & main_basesoc_litespimmap_bus_sel[0]) & main_basesoc_litespimmap_write)) begin
                            builder_litespi_next_state <= 4'd10;
                        end else begin
                            main_basesoc_litespimmap_cs <= 1'd0;
                            builder_litespi_next_state <= 1'd1;
                        end
                        main_basesoc_litespimmap_write_litespi_t_t_next_value <= 1'd1;
                        main_basesoc_litespimmap_write_litespi_t_t_next_value_ce <= 1'd1;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    O_psram_reset_n <= 2'd0;
    O_psram_reset_n[0] <= 1'd1;
end
always @(*) begin
    O_psram_cs_n <= 2'd0;
    O_psram_cs_n[0] <= (~main_hyperram_cs);
end
assign main_hyperram_pads_clk = main_hyperram_clk;
assign main_hyperram_bus_dat_r = main_hyperram_sr;
always @(*) begin
    main_hyperram_tstriple0_o <= 8'd0;
    if (main_hyperram_ca_active) begin
        main_hyperram_tstriple0_o <= main_hyperram_sr[47:40];
    end else begin
        main_hyperram_tstriple0_o <= main_hyperram_sr[47:40];
    end
end
always @(*) begin
    main_hyperram_ca <= 48'd0;
    main_hyperram_ca[47] <= (~main_hyperram_bus_we);
    main_hyperram_ca[45] <= 1'd1;
    main_hyperram_ca[44:16] <= main_hyperram_bus_adr[29:2];
    main_hyperram_ca[2:1] <= main_hyperram_bus_adr;
    main_hyperram_ca[0] <= 1'd0;
end
assign main_hyperram_tstriple1_o = main_hyperram_rwdso;
assign main_tstriple0_oe = main_oe_storage[0];
assign main_tstriple0_o = main_out_storage[0];
assign main_tstriple1_oe = main_oe_storage[1];
assign main_tstriple1_o = main_out_storage[1];
assign main_tstriple2_oe = main_oe_storage[2];
assign main_tstriple2_o = main_out_storage[2];
assign main_tstriple3_oe = main_oe_storage[3];
assign main_tstriple3_o = main_out_storage[3];
assign main_tstriple4_oe = main_oe_storage[4];
assign main_tstriple4_o = main_out_storage[4];
assign main_tstriple5_oe = main_oe_storage[5];
assign main_tstriple5_o = main_out_storage[5];
assign main_tstriple6_oe = main_oe_storage[6];
assign main_tstriple6_o = main_out_storage[6];
assign main_tstriple7_oe = main_oe_storage[7];
assign main_tstriple7_o = main_out_storage[7];
assign main_wait = (~main_done);
always @(*) begin
    main_leds <= 6'd0;
    if ((main_mode == 1'd1)) begin
        main_leds <= main_storage;
    end else begin
        main_leds <= main_chaser;
    end
end
assign {user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
always @(*) begin
    builder_interface0_ack <= 1'd0;
    builder_interface0_dat_r <= 32'd0;
    builder_interface1_adr <= 14'd0;
    builder_interface1_dat_w <= 32'd0;
    builder_interface1_re <= 1'd0;
    builder_interface1_we <= 1'd0;
    builder_wishbone2csr_next_state <= 1'd0;
    builder_wishbone2csr_next_state <= builder_wishbone2csr_state;
    case (builder_wishbone2csr_state)
        1'd1: begin
            builder_interface0_ack <= 1'd1;
            builder_interface0_dat_r <= builder_interface1_dat_r;
            builder_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            builder_interface1_dat_w <= builder_interface0_dat_w;
            if ((builder_interface0_cyc & builder_interface0_stb)) begin
                builder_interface1_adr <= builder_interface0_adr;
                builder_interface1_re <= ((~builder_interface0_we) & (builder_interface0_sel != 1'd0));
                builder_interface1_we <= (builder_interface0_we & (builder_interface0_sel != 1'd0));
                builder_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd1);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_reset_re) begin
        main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
    end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_reset_storage;
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_scratch_storage;
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_bus_errors_status;
assign main_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank1_oe0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_oe0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_oe0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_oe0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_oe0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_in_r = builder_csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_in_re <= 1'd0;
    builder_csr_bankarray_csrbank1_in_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank1_in_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_in_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_out0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank1_out0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_out0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_oe0_w = main_oe_storage;
assign builder_csr_bankarray_csrbank1_in_w = main_in_status;
assign main_in_we = builder_csr_bankarray_csrbank1_in_we;
assign builder_csr_bankarray_csrbank1_out0_w = main_out_storage;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 2'd2);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank2_out0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[5:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_out0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_out0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_out0_w = main_storage;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign builder_csr_bankarray_csrbank3_mmap_dummy_bits0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank3_mmap_dummy_bits0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_mmap_dummy_bits0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_mmap_dummy_bits0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_mmap_dummy_bits0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_mmap_dummy_bits0_w = main_basesoc_litespimmap_storage;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign builder_csr_bankarray_csrbank4_clk_divisor0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_clk_divisor0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_clk_divisor0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank4_clk_divisor0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_clk_divisor0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_clk_divisor0_w = main_basesoc_litespisdrphycore_storage;
assign builder_csr_bankarray_csrbank5_sel = (builder_csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign builder_csr_bankarray_csrbank5_load0_r = builder_csr_bankarray_interface5_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank5_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank5_load0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_load0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_reload0_r = builder_csr_bankarray_interface5_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank5_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank5_reload0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_reload0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_en0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank5_en0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_en0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_update_value0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank5_update_value0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_update_value0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_value_r = builder_csr_bankarray_interface5_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank5_value_re <= 1'd0;
    builder_csr_bankarray_csrbank5_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank5_value_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_value_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_status_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank5_ev_status_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_status_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_pending_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank5_ev_pending_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_pending_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_ev_enable0_r = builder_csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank5_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank5_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank5_sel & (builder_csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank5_ev_enable0_re <= builder_csr_bankarray_interface5_bank_bus_we;
        builder_csr_bankarray_csrbank5_ev_enable0_we <= builder_csr_bankarray_interface5_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank5_load0_w = main_basesoc_timer_load_storage;
assign builder_csr_bankarray_csrbank5_reload0_w = main_basesoc_timer_reload_storage;
assign builder_csr_bankarray_csrbank5_en0_w = main_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank5_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank5_value_w = main_basesoc_timer_value_status;
assign main_basesoc_timer_value_we = builder_csr_bankarray_csrbank5_value_we;
assign main_basesoc_timer_status_status = main_basesoc_timer_zero0;
assign builder_csr_bankarray_csrbank5_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csr_bankarray_csrbank5_ev_status_we;
assign main_basesoc_timer_pending_status = main_basesoc_timer_zero1;
assign builder_csr_bankarray_csrbank5_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csr_bankarray_csrbank5_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank5_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank6_sel = (builder_csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd7);
assign main_basesoc_uart_rxtx_r = builder_csr_bankarray_interface6_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface6_bank_bus_we;
        main_basesoc_uart_rxtx_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_txfull_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank6_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank6_txfull_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_txfull_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_rxempty_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank6_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank6_rxempty_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_rxempty_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_ev_status_r = builder_csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank6_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank6_ev_status_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_ev_status_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_ev_pending_r = builder_csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank6_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank6_ev_pending_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_ev_pending_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_ev_enable0_r = builder_csr_bankarray_interface6_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank6_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank6_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank6_ev_enable0_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_ev_enable0_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_txempty_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank6_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank6_txempty_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_txempty_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_rxfull_r = builder_csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank6_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank6_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank6_sel & (builder_csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank6_rxfull_re <= builder_csr_bankarray_interface6_bank_bus_we;
        builder_csr_bankarray_csrbank6_rxfull_we <= builder_csr_bankarray_interface6_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank6_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank6_txfull_we;
assign builder_csr_bankarray_csrbank6_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank6_rxempty_we;
always @(*) begin
    main_basesoc_uart_status_status <= 2'd0;
    main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
    main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank6_ev_status_w = main_basesoc_uart_status_status;
assign main_basesoc_uart_status_we = builder_csr_bankarray_csrbank6_ev_status_we;
always @(*) begin
    main_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
    main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank6_ev_pending_w = main_basesoc_uart_pending_status;
assign main_basesoc_uart_pending_we = builder_csr_bankarray_csrbank6_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank6_ev_enable0_w = main_basesoc_uart_enable_storage;
assign builder_csr_bankarray_csrbank6_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank6_txempty_we;
assign builder_csr_bankarray_csrbank6_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank6_rxfull_we;
assign builder_csr_interconnect_adr = builder_interface1_adr;
assign builder_csr_interconnect_re = builder_interface1_re;
assign builder_csr_interconnect_we = builder_interface1_we;
assign builder_csr_interconnect_dat_w = builder_interface1_dat_w;
assign builder_interface1_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface5_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface6_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface1_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface2_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface3_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface4_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface5_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface6_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_sram_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface5_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface6_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface5_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface6_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_interface5_bank_bus_dat_r) | builder_csr_bankarray_interface6_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
    builder_self0 <= 30'd0;
    case (builder_grant)
        1'd0: begin
            builder_self0 <= main_basesoc_ibus_adr;
        end
        default: begin
            builder_self0 <= main_basesoc_dbus_adr;
        end
    endcase
end
always @(*) begin
    builder_self1 <= 32'd0;
    case (builder_grant)
        1'd0: begin
            builder_self1 <= main_basesoc_ibus_dat_w;
        end
        default: begin
            builder_self1 <= main_basesoc_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    builder_self2 <= 4'd0;
    case (builder_grant)
        1'd0: begin
            builder_self2 <= main_basesoc_ibus_sel;
        end
        default: begin
            builder_self2 <= main_basesoc_dbus_sel;
        end
    endcase
end
always @(*) begin
    builder_self3 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_self3 <= main_basesoc_ibus_cyc;
        end
        default: begin
            builder_self3 <= main_basesoc_dbus_cyc;
        end
    endcase
end
always @(*) begin
    builder_self4 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_self4 <= main_basesoc_ibus_stb;
        end
        default: begin
            builder_self4 <= main_basesoc_dbus_stb;
        end
    endcase
end
always @(*) begin
    builder_self5 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_self5 <= main_basesoc_ibus_we;
        end
        default: begin
            builder_self5 <= main_basesoc_dbus_we;
        end
    endcase
end
always @(*) begin
    builder_self6 <= 3'd0;
    case (builder_grant)
        1'd0: begin
            builder_self6 <= main_basesoc_ibus_cti;
        end
        default: begin
            builder_self6 <= main_basesoc_dbus_cti;
        end
    endcase
end
always @(*) begin
    builder_self7 <= 2'd0;
    case (builder_grant)
        1'd0: begin
            builder_self7 <= main_basesoc_ibus_bte;
        end
        default: begin
            builder_self7 <= main_basesoc_dbus_bte;
        end
    endcase
end
assign main_basesoc_rx_rx = builder_multiregimpl01;
assign sdrio_clk = sys_clk;
assign sdrio_clk_1 = sys_clk;
assign sdrio_clk_2 = sys_clk;
always @(*) begin
    main_in_status <= 8'd0;
    main_in_status[0] <= builder_multiregimpl11;
    main_in_status[1] <= builder_multiregimpl21;
    main_in_status[2] <= builder_multiregimpl31;
    main_in_status[3] <= builder_multiregimpl41;
    main_in_status[4] <= builder_multiregimpl51;
    main_in_status[5] <= builder_multiregimpl61;
    main_in_status[6] <= builder_multiregimpl71;
    main_in_status[7] <= builder_multiregimpl81;
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sdrio_clk) begin
    spiflash_clk <= main_basesoc_litespisdrphycore_clk;
    spiflash_mosi <= main_basesoc_litespisdrphycore_dq_o;
    main_basesoc_litespisdrphycore_dq_i[1] <= spiflash_miso;
end

always @(posedge sys_clk) begin
    case (builder_grant)
        1'd0: begin
            if ((~builder_request[0])) begin
                if (builder_request[1]) begin
                    builder_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~builder_request[1])) begin
                if (builder_request[0]) begin
                    builder_grant <= 1'd0;
                end
            end
        end
    endcase
    builder_slave_sel_r <= builder_slave_sel;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_bus_error) begin
            main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
        end
    end
    main_basesoc_ram_bus_ack <= 1'd0;
    if (((main_basesoc_ram_bus_cyc & main_basesoc_ram_bus_stb) & ((~main_basesoc_ram_bus_ack) | main_basesoc_adr_burst))) begin
        main_basesoc_ram_bus_ack <= 1'd1;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 25'd18325193;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 25'd18325193);
    end
    builder_rs232phytx_state <= builder_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 25'd18325193);
    end
    builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_uart_tx_clear) begin
        main_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
    if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_uart_rx_clear) begin
        main_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
    if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_tx_fifo_re) begin
            main_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_rx_fifo_re) begin
            main_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_timer_en_storage) begin
        if ((main_basesoc_timer_value == 1'd0)) begin
            main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_timer_value <= main_basesoc_timer_load_storage;
    end
    if (main_basesoc_timer_update_value_re) begin
        main_basesoc_timer_value_status <= main_basesoc_timer_value;
    end
    if (main_basesoc_timer_zero_clear) begin
        main_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
    if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_timer_zero_pending <= 1'd1;
    end
    if (main_basesoc_litespisdrphycore_sr_out_load) begin
        main_basesoc_litespisdrphycore_sr_out <= (main_basesoc_litespisdrphycore_sink_payload_data <<< (6'd32 - main_basesoc_litespisdrphycore_sink_payload_len));
    end
    if (main_basesoc_litespisdrphycore_sr_out_shift) begin
        case (main_basesoc_litespisdrphycore_sink_payload_width)
            1'd1: begin
                main_basesoc_litespisdrphycore_sr_out <= {main_basesoc_litespisdrphycore_sr_out, main_basesoc_litespisdrphycore0};
            end
            2'd2: begin
                main_basesoc_litespisdrphycore_sr_out <= {main_basesoc_litespisdrphycore_sr_out, main_basesoc_litespisdrphycore1};
            end
            3'd4: begin
                main_basesoc_litespisdrphycore_sr_out <= {main_basesoc_litespisdrphycore_sr_out, main_basesoc_litespisdrphycore2};
            end
            4'd8: begin
                main_basesoc_litespisdrphycore_sr_out <= {main_basesoc_litespisdrphycore_sr_out, main_basesoc_litespisdrphycore3};
            end
        endcase
    end
    if (main_basesoc_litespisdrphycore_sr_in_shift) begin
        case (main_basesoc_litespisdrphycore_sink_payload_width)
            1'd1: begin
                main_basesoc_litespisdrphycore_sr_in <= {main_basesoc_litespisdrphycore_sr_in, main_basesoc_litespisdrphycore_dq_i[1]};
            end
            2'd2: begin
                main_basesoc_litespisdrphycore_sr_in <= {main_basesoc_litespisdrphycore_sr_in, main_basesoc_litespisdrphycore_dq_i};
            end
            3'd4: begin
                main_basesoc_litespisdrphycore_sr_in <= {main_basesoc_litespisdrphycore_sr_in, main_basesoc_litespisdrphycore_dq_i};
            end
            4'd8: begin
                main_basesoc_litespisdrphycore_sr_in <= {main_basesoc_litespisdrphycore_sr_in, main_basesoc_litespisdrphycore_dq_i};
            end
        endcase
    end
    main_basesoc_litespisdrphycore_posedge_reg <= main_basesoc_litespisdrphycore_posedge;
    main_basesoc_litespisdrphycore_posedge_reg2 <= main_basesoc_litespisdrphycore_posedge_reg;
    if ((main_basesoc_litespisdrphycore_en | main_basesoc_litespisdrphycore_en_int)) begin
        if ((main_basesoc_litespisdrphycore_cnt < main_basesoc_litespisdrphycore_div)) begin
            main_basesoc_litespisdrphycore_cnt <= (main_basesoc_litespisdrphycore_cnt + 1'd1);
        end else begin
            main_basesoc_litespisdrphycore_cnt <= 1'd0;
            main_basesoc_litespisdrphycore_clk <= (~main_basesoc_litespisdrphycore_clk);
        end
    end else begin
        main_basesoc_litespisdrphycore_clk <= 1'd0;
        main_basesoc_litespisdrphycore_cnt <= 1'd0;
    end
    if (main_basesoc_litespisdrphycore_wait) begin
        if ((~main_basesoc_litespisdrphycore_done)) begin
            main_basesoc_litespisdrphycore_count <= (main_basesoc_litespisdrphycore_count - 1'd1);
        end
    end else begin
        main_basesoc_litespisdrphycore_count <= 4'd11;
    end
    builder_litespiphy_state <= builder_litespiphy_next_state;
    if (main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value_ce) begin
        main_basesoc_litespisdrphycore_sr_cnt <= main_basesoc_litespisdrphycore_sr_cnt_litespiphy_next_value;
    end
    if (main_basesoc_litespimmap_wait) begin
        if ((~main_basesoc_litespimmap_done)) begin
            main_basesoc_litespimmap_count <= (main_basesoc_litespimmap_count - 1'd1);
        end
    end else begin
        main_basesoc_litespimmap_count <= 9'd256;
    end
    builder_litespi_state <= builder_litespi_next_state;
    if (main_basesoc_litespimmap_burst_cs_litespi_next_value_ce) begin
        main_basesoc_litespimmap_burst_cs <= main_basesoc_litespimmap_burst_cs_litespi_next_value;
    end
    if (main_basesoc_litespimmap_byte_count_litespi_t_next_value_ce) begin
        main_basesoc_litespimmap_byte_count <= main_basesoc_litespimmap_byte_count_litespi_t_next_value;
    end
    if (main_basesoc_litespimmap_write_litespi_t_t_next_value_ce) begin
        main_basesoc_litespimmap_write <= main_basesoc_litespimmap_write_litespi_t_t_next_value;
    end
    if (main_basesoc_litespimmap_write_mask_litespi_t_f_next_value_ce0) begin
        main_basesoc_litespimmap_write_mask <= main_basesoc_litespimmap_write_mask_litespi_t_f_next_value0;
    end
    if (main_basesoc_litespimmap_data_write_litespi_t_f_next_value_ce1) begin
        main_basesoc_litespimmap_data_write <= main_basesoc_litespimmap_data_write_litespi_t_f_next_value1;
    end
    if (main_basesoc_litespimmap_burst_adr_litespi_f_next_value_ce) begin
        main_basesoc_litespimmap_burst_adr <= main_basesoc_litespimmap_burst_adr_litespi_f_next_value;
    end
    main_hyperram_clk_phase <= (main_hyperram_clk_phase + 1'd1);
    case (main_hyperram_clk_phase)
        1'd1: begin
            main_hyperram_clk <= main_hyperram_cs;
        end
        2'd3: begin
            main_hyperram_clk <= 1'd0;
        end
    endcase
    main_hyperram_dqi <= main_hyperram_tstriple0_i;
    if (((main_hyperram_clk_phase == 1'd0) | (main_hyperram_clk_phase == 2'd2))) begin
        if (main_hyperram_ca_active) begin
            main_hyperram_sr <= {main_hyperram_sr[39:0], main_hyperram_dqi};
        end else begin
            main_hyperram_sr <= {main_hyperram_sr[39:0], main_hyperram_dqi};
        end
    end
    if ((((main_hyperram_bus_cyc & main_hyperram_bus_stb) & (main_hyperram_clk_phase == 1'd1)) & (main_hyperram_trigger == 1'd0))) begin
    end
    if ((main_hyperram_trigger == 2'd3)) begin
        main_hyperram_cs <= 1'd1;
        main_hyperram_tstriple0_oe <= 1'd1;
        main_hyperram_sr <= main_hyperram_ca;
        main_hyperram_ca_active <= 1'd1;
    end
    if ((main_hyperram_trigger == 4'd15)) begin
        main_hyperram_tstriple0_oe <= 1'd0;
        main_hyperram_ca_active <= 1'd0;
    end
    if ((main_hyperram_trigger == 6'd59)) begin
        main_hyperram_tstriple0_oe <= main_hyperram_bus_we;
        main_hyperram_sr[15:0] <= 1'd0;
        main_hyperram_sr[47:16] <= main_hyperram_bus_dat_w;
        main_hyperram_tstriple1_oe <= main_hyperram_bus_we;
        main_hyperram_rwdso[0] <= (~main_hyperram_bus_sel[3]);
    end
    if ((main_hyperram_trigger == 6'd61)) begin
        main_hyperram_rwdso[0] <= (~main_hyperram_bus_sel[2]);
    end
    if ((main_hyperram_trigger == 6'd63)) begin
        main_hyperram_rwdso[0] <= (~main_hyperram_bus_sel[1]);
    end
    if ((main_hyperram_trigger == 7'd65)) begin
        main_hyperram_rwdso[0] <= (~main_hyperram_bus_sel[0]);
    end
    if ((main_hyperram_trigger == 7'd67)) begin
        main_hyperram_cs <= 1'd0;
        main_hyperram_tstriple1_oe <= 1'd0;
        main_hyperram_tstriple0_oe <= 1'd0;
    end
    if ((main_hyperram_trigger == 7'd69)) begin
        main_hyperram_bus_ack <= 1'd1;
    end
    if ((main_hyperram_trigger == 7'd70)) begin
        main_hyperram_bus_ack <= 1'd0;
    end
    if ((main_hyperram_trigger == 7'd71)) begin
    end
    if ((main_hyperram_trigger == 7'd71)) begin
        main_hyperram_trigger <= 1'd0;
    end else begin
        if ((main_hyperram_trigger != 1'd0)) begin
            main_hyperram_trigger <= (main_hyperram_trigger + 1'd1);
        end else begin
            if (((main_hyperram_bus_cyc & main_hyperram_bus_stb) & (main_hyperram_clk_phase == 1'd1))) begin
                main_hyperram_trigger <= 1'd1;
            end
        end
    end
    if (main_done) begin
        main_chaser <= {main_chaser, (~main_chaser[5])};
    end
    if (main_re) begin
        main_mode <= 1'd1;
    end
    if (main_wait) begin
        if ((~main_done)) begin
            main_count <= (main_count - 1'd1);
        end
    end else begin
        main_count <= 22'd2250000;
    end
    builder_wishbone2csr_state <= builder_wishbone2csr_next_state;
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_basesoc_reset_storage <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_basesoc_scratch_storage <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_oe0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_in_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_oe0_re) begin
        main_oe_storage <= builder_csr_bankarray_csrbank1_oe0_r;
    end
    main_oe_re <= builder_csr_bankarray_csrbank1_oe0_re;
    main_in_re <= builder_csr_bankarray_csrbank1_in_re;
    if (builder_csr_bankarray_csrbank1_out0_re) begin
        main_out_storage <= builder_csr_bankarray_csrbank1_out0_r;
    end
    main_out_re <= builder_csr_bankarray_csrbank1_out0_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_out0_re) begin
        main_storage <= builder_csr_bankarray_csrbank2_out0_r;
    end
    main_re <= builder_csr_bankarray_csrbank2_out0_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_mmap_dummy_bits0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank3_mmap_dummy_bits0_re) begin
        main_basesoc_litespimmap_storage <= builder_csr_bankarray_csrbank3_mmap_dummy_bits0_r;
    end
    main_basesoc_litespimmap_re <= builder_csr_bankarray_csrbank3_mmap_dummy_bits0_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_clk_divisor0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank4_clk_divisor0_re) begin
        main_basesoc_litespisdrphycore_storage <= builder_csr_bankarray_csrbank4_clk_divisor0_r;
    end
    main_basesoc_litespisdrphycore_re <= builder_csr_bankarray_csrbank4_clk_divisor0_re;
    builder_csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank5_sel) begin
        case (builder_csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface5_bank_bus_dat_r <= builder_csr_bankarray_csrbank5_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank5_load0_re) begin
        main_basesoc_timer_load_storage <= builder_csr_bankarray_csrbank5_load0_r;
    end
    main_basesoc_timer_load_re <= builder_csr_bankarray_csrbank5_load0_re;
    if (builder_csr_bankarray_csrbank5_reload0_re) begin
        main_basesoc_timer_reload_storage <= builder_csr_bankarray_csrbank5_reload0_r;
    end
    main_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank5_reload0_re;
    if (builder_csr_bankarray_csrbank5_en0_re) begin
        main_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank5_en0_r;
    end
    main_basesoc_timer_en_re <= builder_csr_bankarray_csrbank5_en0_re;
    if (builder_csr_bankarray_csrbank5_update_value0_re) begin
        main_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank5_update_value0_r;
    end
    main_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank5_update_value0_re;
    main_basesoc_timer_value_re <= builder_csr_bankarray_csrbank5_value_re;
    main_basesoc_timer_status_re <= builder_csr_bankarray_csrbank5_ev_status_re;
    if (builder_csr_bankarray_csrbank5_ev_pending_re) begin
        main_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank5_ev_pending_r;
    end
    main_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank5_ev_pending_re;
    if (builder_csr_bankarray_csrbank5_ev_enable0_re) begin
        main_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank5_ev_enable0_r;
    end
    main_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank5_ev_enable0_re;
    builder_csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank6_sel) begin
        case (builder_csr_bankarray_interface6_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface6_bank_bus_dat_r <= builder_csr_bankarray_csrbank6_rxfull_w;
            end
        endcase
    end
    main_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank6_txfull_re;
    main_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank6_rxempty_re;
    main_basesoc_uart_status_re <= builder_csr_bankarray_csrbank6_ev_status_re;
    if (builder_csr_bankarray_csrbank6_ev_pending_re) begin
        main_basesoc_uart_pending_r <= builder_csr_bankarray_csrbank6_ev_pending_r;
    end
    main_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank6_ev_pending_re;
    if (builder_csr_bankarray_csrbank6_ev_enable0_re) begin
        main_basesoc_uart_enable_storage <= builder_csr_bankarray_csrbank6_ev_enable0_r;
    end
    main_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank6_ev_enable0_re;
    main_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank6_txempty_re;
    main_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank6_rxfull_re;
    if (sys_rst) begin
        main_basesoc_reset_storage <= 2'd0;
        main_basesoc_reset_re <= 1'd0;
        main_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_scratch_re <= 1'd0;
        main_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_bus_errors <= 32'd0;
        main_basesoc_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_uart_status_re <= 1'd0;
        main_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_timer_load_re <= 1'd0;
        main_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_timer_en_re <= 1'd0;
        main_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_timer_value_status <= 32'd0;
        main_basesoc_timer_value_re <= 1'd0;
        main_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_timer_status_re <= 1'd0;
        main_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_timer_value <= 32'd0;
        main_basesoc_litespisdrphycore_storage <= 8'd0;
        main_basesoc_litespisdrphycore_re <= 1'd0;
        main_basesoc_litespisdrphycore_cnt <= 8'd0;
        main_basesoc_litespisdrphycore_clk <= 1'd0;
        main_basesoc_litespisdrphycore_posedge_reg <= 1'd0;
        main_basesoc_litespisdrphycore_posedge_reg2 <= 1'd0;
        main_basesoc_litespisdrphycore_count <= 4'd11;
        main_basesoc_litespimmap_burst_cs <= 1'd0;
        main_basesoc_litespimmap_count <= 9'd256;
        main_basesoc_litespimmap_write <= 1'd0;
        main_basesoc_litespimmap_write_mask <= 4'd0;
        main_basesoc_litespimmap_storage <= 8'd0;
        main_basesoc_litespimmap_re <= 1'd0;
        main_basesoc_litespimmap_data_write <= 32'd0;
        main_hyperram_bus_ack <= 1'd0;
        main_hyperram_clk <= 1'd0;
        main_hyperram_clk_phase <= 2'd0;
        main_hyperram_cs <= 1'd0;
        main_hyperram_ca_active <= 1'd0;
        main_hyperram_sr <= 48'd0;
        main_hyperram_tstriple0_oe <= 1'd0;
        main_hyperram_tstriple1_oe <= 1'd0;
        main_hyperram_dqi <= 8'd0;
        main_hyperram_rwdso <= 2'd0;
        main_hyperram_trigger <= 7'd0;
        main_oe_storage <= 1'd0;
        main_oe_re <= 1'd0;
        main_in_re <= 1'd0;
        main_out_storage <= 1'd0;
        main_out_re <= 1'd0;
        main_storage <= 6'd0;
        main_re <= 1'd0;
        main_chaser <= 6'd0;
        main_mode <= 1'd0;
        main_count <= 22'd2250000;
        builder_grant <= 1'd0;
        builder_slave_sel_r <= 4'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_rs232phytx_state <= 1'd0;
        builder_rs232phyrx_state <= 1'd0;
        builder_litespiphy_state <= 2'd0;
        builder_litespi_state <= 4'd0;
        builder_wishbone2csr_state <= 1'd0;
    end
    builder_multiregimpl00 <= serial_rx;
    builder_multiregimpl01 <= builder_multiregimpl00;
    builder_multiregimpl10 <= main_tstriple0_i;
    builder_multiregimpl11 <= builder_multiregimpl10;
    builder_multiregimpl20 <= main_tstriple1_i;
    builder_multiregimpl21 <= builder_multiregimpl20;
    builder_multiregimpl30 <= main_tstriple2_i;
    builder_multiregimpl31 <= builder_multiregimpl30;
    builder_multiregimpl40 <= main_tstriple3_i;
    builder_multiregimpl41 <= builder_multiregimpl40;
    builder_multiregimpl50 <= main_tstriple4_i;
    builder_multiregimpl51 <= builder_multiregimpl50;
    builder_multiregimpl60 <= main_tstriple5_i;
    builder_multiregimpl61 <= builder_multiregimpl60;
    builder_multiregimpl70 <= main_tstriple6_i;
    builder_multiregimpl71 <= builder_multiregimpl70;
    builder_multiregimpl80 <= main_tstriple7_i;
    builder_multiregimpl81 <= builder_multiregimpl80;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sipeed_tang_nano_9k_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_we[0])
		sram[main_basesoc_adr][7:0] <= main_basesoc_dat_w[7:0];
	if (main_basesoc_we[1])
		sram[main_basesoc_adr][15:8] <= main_basesoc_dat_w[15:8];
	if (main_basesoc_we[2])
		sram[main_basesoc_adr][23:16] <= main_basesoc_dat_w[23:16];
	if (main_basesoc_we[3])
		sram[main_basesoc_adr][31:24] <= main_basesoc_dat_w[31:24];
	sram_adr0 <= main_basesoc_adr;
end
assign main_basesoc_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 46-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:45];
initial begin
	$readmemh("sipeed_tang_nano_9k_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


assign IO_psram_dq[7:0] = main_hyperram_tstriple0_oe ? main_hyperram_tstriple0_o : 8'bz;
assign main_hyperram_tstriple0_i = IO_psram_dq[7:0];

assign IO_psram_rwds[0] = main_hyperram_tstriple1_oe ? main_hyperram_tstriple1_o : 1'bz;
assign main_hyperram_tstriple1_i = IO_psram_rwds[0];

assign gpio_tristate[0] = main_tstriple0_oe ? main_tstriple0_o : 1'bz;
assign main_tstriple0_i = gpio_tristate[0];

assign gpio_tristate[1] = main_tstriple1_oe ? main_tstriple1_o : 1'bz;
assign main_tstriple1_i = gpio_tristate[1];

assign gpio_tristate[2] = main_tstriple2_oe ? main_tstriple2_o : 1'bz;
assign main_tstriple2_i = gpio_tristate[2];

assign gpio_tristate[3] = main_tstriple3_oe ? main_tstriple3_o : 1'bz;
assign main_tstriple3_i = gpio_tristate[3];

assign gpio_tristate[4] = main_tstriple4_oe ? main_tstriple4_o : 1'bz;
assign main_tstriple4_i = gpio_tristate[4];

assign gpio_tristate[5] = main_tstriple5_oe ? main_tstriple5_o : 1'bz;
assign main_tstriple5_i = gpio_tristate[5];

assign gpio_tristate[6] = main_tstriple6_oe ? main_tstriple6_o : 1'bz;
assign main_tstriple6_i = gpio_tristate[6];

assign gpio_tristate[7] = main_tstriple7_oe ? main_tstriple7_o : 1'bz;
assign main_tstriple7_i = gpio_tristate[7];

//------------------------------------------------------------------------------
// Instance rPLL of rPLL Module.
//------------------------------------------------------------------------------
rPLL #(
	// Parameters.
	.CLKFB_SEL        ("internal"),
	.CLKOUTD3_SRC     ("CLKOUT"),
	.CLKOUTD_BYPASS   ("false"),
	.CLKOUTD_SRC      ("CLKOUT"),
	.CLKOUTP_BYPASS   ("false"),
	.CLKOUTP_DLY_STEP (1'd0),
	.CLKOUTP_FT_DIR   (1'd1),
	.CLKOUT_BYPASS    ("false"),
	.CLKOUT_DLY_STEP  (1'd0),
	.CLKOUT_FT_DIR    (1'd1),
	.DEVICE           ("GW1NR-9C"),
	.DUTYDA_SEL       ("1000"),
	.DYN_DA_EN        ("false"),
	.DYN_FBDIV_SEL    ("false"),
	.DYN_IDIV_SEL     ("false"),
	.DYN_ODIV_SEL     ("false"),
	.DYN_SDIV_SEL     (2'd2),
	.FBDIV_SEL        (1'd0),
	.FCLKIN           ("27.0"),
	.IDIV_SEL         (1'd0),
	.ODIV_SEL         (5'd16),
	.PSDA_SEL         ("0000")
) rPLL (
	// Inputs.
	.CLKFB    (1'd0),
	.CLKIN    (main_crg_clkin),
	.DUTYDA   (4'd0),
	.FBDSEL   (6'd0),
	.FDLY     (4'd15),
	.IDSEL    (6'd0),
	.ODSEL    (6'd0),
	.PSDA     (4'd0),
	.RESET    (main_crg_reset),
	.RESET_P  (1'd0),

	// Outputs.
	.CLKOUT   (main_crg_clkout),
	.CLKOUTD  (builder_gw1npll1),
	.CLKOUTD3 (builder_gw1npll2),
	.CLKOUTP  (builder_gw1npll0),
	.LOCK     (main_crg_locked)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (main_basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (main_basesoc_dbus_dat_r),
	.dBusWishbone_ERR       (main_basesoc_dbus_err),
	.externalInterruptArray (main_basesoc_interrupt),
	.externalResetVector    (main_vexriscv),
	.iBusWishbone_ACK       (main_basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (main_basesoc_ibus_dat_r),
	.iBusWishbone_ERR       (main_basesoc_ibus_err),
	.reset                  ((sys_rst | main_basesoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (main_basesoc_dbus_adr),
	.dBusWishbone_BTE       (main_basesoc_dbus_bte),
	.dBusWishbone_CTI       (main_basesoc_dbus_cti),
	.dBusWishbone_CYC       (main_basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (main_basesoc_dbus_dat_w),
	.dBusWishbone_SEL       (main_basesoc_dbus_sel),
	.dBusWishbone_STB       (main_basesoc_dbus_stb),
	.dBusWishbone_WE        (main_basesoc_dbus_we),
	.iBusWishbone_ADR       (main_basesoc_ibus_adr),
	.iBusWishbone_BTE       (main_basesoc_ibus_bte),
	.iBusWishbone_CTI       (main_basesoc_ibus_cti),
	.iBusWishbone_CYC       (main_basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (main_basesoc_ibus_dat_w),
	.iBusWishbone_SEL       (main_basesoc_ibus_sel),
	.iBusWishbone_STB       (main_basesoc_ibus_stb),
	.iBusWishbone_WE        (main_basesoc_ibus_we)
);

//------------------------------------------------------------------------------
// Instance DFFP of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP(
	// Inputs.
	.CLK    (sys_clk),
	.D      (1'd0),
	.PRESET (main_crg_reset),

	// Outputs.
	.Q      (builder_rst1)
);

//------------------------------------------------------------------------------
// Instance DFFP_1 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_1(
	// Inputs.
	.CLK    (sys_clk),
	.D      (builder_rst1),
	.PRESET (main_crg_reset),

	// Outputs.
	.Q      (sys_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-05-15 01:13:16.
//------------------------------------------------------------------------------
